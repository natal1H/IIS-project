{%if object%}

        <h1>{{object.name}}</h1>
        <h2>Ponúkané jedlá:</h2>
        {%endif%}


                {% for instance in meals %}
                    ID: {{instance.id_testItem}}||{{instance.name}} <a href="{%url 'add_to_cart' instance.id_testItem%}" class="">Add to Cart</a><br>


                {% endfor %}


"""
	for i in menu:
		
		item_obj=Menu_items.objects.filter(id_menu=i.id_menu.id_menu)
		
		for x in item_obj:
			print (x.id_item) #finally got into the menu
	"""


"""
def home_view(request):
	obj = Facility.objects.all()  # list of objects
	context = {
		"object": obj,
	}
	return render(request, 'base.html')


def get_name(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = NameForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            # process the data in form.cleaned_data as required
            # ...
            # redirect to a new URL:
            return HttpResponseRedirect('/thanks/')

    # if a GET (or any other method) we'll create a blank form
    else:
        form = NameForm()

    return render(request, 'name.html', {'form': form})
"""

"""
def search_view(request):
    search = request.POST.get('search')
    print(search)
    return render(request, 'search_success.html',{})
    
    
def login_view(request):
	return render(request, 'base.html',{})

"""

"""
#prints are just for debugging

def search_result_view(request):

    search =request.POST.get('search_form')
    print(search)
    objects = Facility.objects.all()
    for obj in objects:
        if search in obj.address or search in obj.name:
            print("hey it is here")
            print(obj.address)
            print(obj.name)

    #print(search)
    return render(request, 'search_success.html', {})

"""

class testItem(models.Model):
    id_testItem = models.AutoField(primary_key=True)
    name = models.CharField(max_length=150, blank=False)
    Facility = models.ForeignKey(Facility, on_delete=models.CASCADE)





class testOrder(models.Model):
    id_order =models.AutoField(primary_key=True)
    name = models.CharField(max_length=150, blank=False)
    #testItem = models.ForeignKey(testItem, on_delete=models.CASCADE)



    """
	if request.user.is_authenticated:
		print ("Yes, he is")

	cart_id=request.session.get("cart_id", None)
	qs=Food_order.objects.filter(id_food_order=cart_id)

	if qs.count()==1:
		cart_obj=qs.first()
		print ("it is already created")
	else:
		cart_obj=Food_order.objects.create()
		request.session['cart_id']=cart_obj.id_food_order

	"""

def pay_view_unreg(request):
    if request.user.is_authenticated:
        raise PermissionDenied()

    my_form = Pay_form()

    pass


def add_to_cart2(request, id_item, id_facility):
    cart_id = request.session.get("cart_id", None)
    qs = Food_order.objects.filter(id_food_order=cart_id, status='o')

    facility_instance_control = Facility.objects.filter(id_facility=id_facility).first

    if qs.count() == 1:
        cart_obj = qs.first()
        print("it is already created")

        #
        food_order_instance = Food_order.objects.filter(id_food_order=cart_obj.id_food_order).first()
        # facility_instance=Facility.objects.filter(id_facility=id_facility).first()
        """
		print("facility id:")
		print(food_order_instance.facility.id_facility)
		print(id_facility)
		print("|||||")
		"""
        if food_order_instance.facility.id_facility != id_facility:
            print("you cant order from different facility")
            return render(request, 'error_access.html', {
                "msg": "Unable to add items from different facilities"
            })

        food_order_item_instance = Item.objects.filter(id_item=id_item).first()

        food_order_item_instance_from_mm_table = Food_order_item.objects.filter(id_food_order=food_order_instance,
                                                                                id_item=food_order_item_instance)

        if food_order_item_instance_from_mm_table.count() == 1:
            quantity = food_order_item_instance_from_mm_table.first().quantity + 1
            print(quantity)
            Food_order_item.objects.filter(id_food_order=food_order_instance, id_item=food_order_item_instance).update(
                quantity=quantity)
        # Food_order.objects.filter(id_food_order=cart_id, status='o').update(status='a')
        else:
            Food_order_item.objects.create(id_food_order=food_order_instance, id_item=food_order_item_instance)




    else:
        print("Now we are makin new order")
        facility_instance = Facility.objects.filter(id_facility=id_facility).first()
        food_order_item_instance = Item.objects.filter(id_item=id_item).first()

        # Creates new food order
        if request.user.is_authenticated:

            person_instance = Person.objects.filter(user=request.user).first()
            food_order_instance = Food_order.objects.create(facility=facility_instance, person=person_instance,
                                                            status='o')  # Creates new food order
        else:
            food_order_instance = Food_order.objects.create(facility=facility_instance, status='o')

        Food_order_item.objects.create(id_food_order=food_order_instance,
                                       id_item=food_order_item_instance)  # adds the item to the order

        request.session['cart_id'] = food_order_instance.id_food_order

    # TOCONTINUE

    # TODO order, checkout etc. and all  almost done, but needs to be finalized and tested
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))  # stays on the same page
